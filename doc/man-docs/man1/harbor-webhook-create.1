.nh
.TH "HARBOR" "1"  "Habor Community" "Harbor User Mannuals"

.SH NAME
harbor-webhook-create - Create a new webhook for a Harbor project


.SH SYNOPSIS
\fBharbor webhook create [name] [flags]\fP


.SH DESCRIPTION
This command creates a new webhook policy for a specified Harbor project.

.PP
You can either provide all required flags (project name, notify type, endpoint, etc.) directly to create the webhook non-interactively,
or leave them out and be guided through an interactive prompt to input each field. The webhook name is required as an argument.


.SH OPTIONS
\fB--auth-header\fP=""
	Authentication Header

.PP
\fB--description\fP=""
	Webhook Description

.PP
\fB--endpoint-url\fP=""
	Webhook Endpoint URL

.PP
\fB--event-type\fP=[]
	Event Types (comma separated)

.PP
\fB-h\fP, \fB--help\fP[=false]
	help for create

.PP
\fB--notify-type\fP=""
	Notify Type (http, slack)

.PP
\fB--payload-format\fP=""
	Payload Format (Default, CloudEvents)

.PP
\fB--project\fP=""
	Project Name

.PP
\fB--verify-remote-certificate\fP[=true]
	Verify Remote Certificate


.SH OPTIONS INHERITED FROM PARENT COMMANDS
\fB-c\fP, \fB--config\fP=""
	config file (default is $HOME/.config/harbor-cli/config.yaml)

.PP
\fB-o\fP, \fB--output-format\fP=""
	Output format. One of: json|yaml

.PP
\fB-v\fP, \fB--verbose\fP[=false]
	verbose output


.SH EXAMPLE
.EX
  # Create a webhook using flags
  harbor-cli webhook create my-webhook \\
    --project my-project \\
    --notify-type http \\
    --event-type PUSH_ARTIFACT,DELETE_ARTIFACT \\
    --endpoint-url https://example.com/webhook \\
    --description "Webhook for artifact events" \\
    --payload-format Default \\
    --auth-header "Bearer mytoken"

  # Create a webhook using the interactive prompt
  harbor-cli webhook create my-webhook
.EE


.SH SEE ALSO
\fBharbor-webhook(1)\fP